spring:
  application:
    name: api-gateway
  cloud:
    gateway:
      # 跨域配置
#      globalcors:
#        cors-configurations:
#          '[/**]':
#            # 确保只设置了一个允许的源
#            allowedOrigins: "*"
#            # 明确列出所有允许的方法，包括OPTIONS
#            allowedMethods:
#              - GET
#              - POST
#              - PUT
#              - DELETE
#              - OPTIONS
#            # 允许凭据
##            allowCredentials: true
#            # 允许所有头部
#            allowedHeaders: "*"
#            # 暴露的头部，如果有特定需要的话
#            exposedHeaders: "*"
      # 设置超时时间
#      httpclient:
#        connect-timeout: 1000
#        response-timeout: 5s
      # 响应头加上 source ： wangkeyao
      default-filters:
        - AddResponseHeader=source, wangkeyao
      # 请求路径为 /api/** 都转发到后端服务 http://localhost:8123
      routes:
#        - id: default-fallback
#          uri: http://localhost:7529
#          predicates:
#             - Path=/api/fallback
#          filters:
#             - name: FallbackHeaders
#               args:
#                 executionExceptionTypeHeaderName: Error-Header
#             - name: CircuitBreaker
#               args:
#                 name: fetchIngredients
#                 fallbackUri: forward:/api/fallback
        - id: api-service-route
          uri: http://localhost:8123
          predicates:
            - Path=/api/service/**
#          metadata:
#            cors:
#              allowedOrigins: "*"
#              allowedMethods:
#                - GET
#                - POST
#              allowedHeaders: '*'
#              maxAge: 30
#          filters:
#            - name: Retry
#              args:
#                retries: 3
#                statuses: BAD_GATEWAY
#                methods: GET,POST
#                backoff:
#                  firstBackoff: 10ms
#                  maxBackoff: 50ms
#                  factor: 2
#                  basedOnPreviousValue: true
#            - name: RequestRateLimiter
#              args:
#                key-resolver: '#{@uriKeyResolver}'
#                redis-rate-limiter.replenishRate: 300 # 令牌桶每秒填充速率
#                redis-rate-limiter.burstCapacity: 700 # 令牌桶总容量
#                redis-rate-limiter.requestedTokens: 1 # 每次消耗令牌个数
#            - name: RequestRateLimiter
#              args:
#                key-resolver: '#{@ipKeyResolver}'
#                redis-rate-limiter.replenishRate: 2 # 令牌桶每秒填充速率
#                redis-rate-limiter.burstCapacity: 2 # 令牌桶总容量
#                redis-rate-limiter.requestedTokens: 1 # 每次消耗令牌个数
#            - name: RequestRateLimiter
#              args:
#                key-resolver: '#{@paramsKeyResolver}'
#                redis-rate-limiter.replenishRate: 2 # 令牌桶每秒填充速率
#                redis-rate-limiter.burstCapacity: 2 # 令牌桶总容量
#                redis-rate-limiter.requestedTokens: 1 # 每次消耗令牌个数
        - id: api-backend-route
          uri: http://localhost:7529
          # 跳过全局过滤器
          filters:
#            - StripPrefix=1
            - IgnoreGlobalFilter  #在本路由启用跳过全局过滤器
          predicates:
            - Path=/api/**
#          metadata:
#            cors:
#              allowedOrigins: "*"
#              allowedMethods:
#                - GET
#                - POST
#              allowedHeaders: '*'
#              maxAge: 30
  main:
    web-application-type: reactive
  redis:
    host: localhost
    port: 6379
    database: 5
    timeout: 20000
server:
  port: 8090
# spring gateway 开启日志追踪
logging:
  level:
    org:
      springframework:
        cloud:
          gateway: trace
dubbo:
  application:
    name: api-gateway-consumer
    logger: slf4j
    qos-port: 33333
  registry:
    address: nacos://${nacos.address:127.0.0.1}:8848?username=nacos&password=nacos
#knife4j:
#  gateway:
#    # ① 第一个配置，开启gateway聚合组件
#    enabled: true
#    # ② 第二行配置，设置聚合模式采用discover服务发现的模式
#    strategy: discover
#    discover:
#      # ③ 第三行配置，开启discover模式
#      enabled: true
#      # ④ 第四行配置，聚合子服务全部为Swagger2规范的文档
#      version: swagger2